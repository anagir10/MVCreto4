/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
public class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {
        try {
            ArrayList<Requerimiento_1Vo> resultado_requerimiento1 = controlador.consultarRequerimiento1();
            resultado_requerimiento1.forEach(System.out::println);

        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento2() {
        try {
            ArrayList<Requerimiento_2Vo> resultado_requerimiento2 = controlador.consultarRequerimiento2();
            for (Requerimiento_2Vo i : resultado_requerimiento2) {
                System.out.println(i.getIdProyecto() + " " + i.getProveedor());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {
        try {
            ArrayList<Requerimiento_3Vo> resultado_requerimiento3 = controlador.consultarRequerimiento3();
            for (Requerimiento_3Vo i : resultado_requerimiento3) {
               System.out.printf("%d %s %n", i.getIdProyecto(), i.getMaterial());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }
}

// Controlador
public class ControladorRequerimientos {
private Requerimiento_1Dao requerimiento_1Dao;
private Requerimiento_2Dao requerimiento_2Dao;
private Requerimiento_3Dao requerimiento_3Dao;

public ControladorRequerimientos() {
    this.requerimiento_1Dao = new Requerimiento_1Dao();
    this.requerimiento_2Dao = new Requerimiento_2Dao();
    this.requerimiento_3Dao = new Requerimiento_3Dao();
}

public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {
    return this.requerimiento_1Dao.requerimiento1();
}

public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {
    return this.requerimiento_2Dao.requerimiento2();
}

public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
    return this.requerimiento_3Dao.requerimiento3();
}
}


// Modelo
// VO

public class Requerimiento_1Vo {
    private String ciudadResidencia;
    private Double promedio;
  
    public Requerimiento_1Vo() {
    }

    public String getCiudadResidencia() {
        return ciudadResidencia;
    }

    public void setCiudadResidencia(String ciudadResidencia) {
        this.ciudadResidencia = ciudadResidencia;
    }

    public Double getPromedio() {
        return promedio;
    }

    public void setPromedio(Double promedio) {
        this.promedio = promedio;
    }

    @Override
    public String toString() {
        return ciudadResidencia + " " + Math.round(promedio);
    }

}

public class Requerimiento_2Vo {
    private Integer idProyecto;
    private String proveedor;

    public Requerimiento_2Vo() {
    }

    public Integer getIdProyecto() {
        return idProyecto;
    }

    public void setIdProyecto(Integer idProyecto) {
        this.idProyecto = idProyecto;
    }

    public String getProveedor() {
        return proveedor;
    }

    public void setProveedor(String material) {
        this.proveedor = material;
    }

    @Override
    public String toString() {
        return idProyecto + " " + proveedor;
    }

}

public class Requerimiento_3Vo {
    private Integer idProyecto;
    private String material;
    

    public Requerimiento_3Vo() {
    }

    public Integer getIdProyecto() {
        return idProyecto;
    }

    public void setIdProyecto(Integer idProyecto) {
        this.idProyecto = idProyecto;
    }

    public String getMaterial() {
        return material;
    }

    public void setMaterial(String material) {
        this.material = material;
    }

    @Override
    public String toString() {
        return idProyecto + " " + material;
    }

}
// DAO
public class Requerimiento_1Dao {

    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        Connection connection = JDBCUtilities.getConnection();

        ArrayList<Requerimiento_1Vo> listado_registros_rq1 = new ArrayList<Requerimiento_1Vo>();

        String sql = "SELECT Ciudad_Residencia , AVG(Salario) as Promedio FROM Lider GROUP BY     Ciudad_Residencia HAVING AVG(Salario)<400000 ORDER BY Promedio DESC;";

        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Requerimiento_1Vo requerimiento1 = new Requerimiento_1Vo();
                requerimiento1.setCiudadResidencia(rs.getString("Ciudad_REsidencia"));
                requerimiento1.setPromedio(rs.getDouble("Promedio"));
                listado_registros_rq1.add(requerimiento1);
            }
        }
        return listado_registros_rq1;
    }
}

public class Requerimiento_2Dao{

public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
    Connection connection = JDBCUtilities.getConnection();
    ArrayList<Requerimiento_2Vo> listado_registros_rq2 = new ArrayList<Requerimiento_2Vo>();
    String sql = "SELECT p.ID_Proyecto, c.Proveedor FROM Proyecto p JOIN Compra c ON(p.ID_Proyecto=c.ID_Proyecto ) WHERE p.Ciudad ='Neiva' ORDER by p.ID_Proyecto;";
    try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
        while (rs.next()) {
            Requerimiento_2Vo requerimiento2 = new Requerimiento_2Vo();
            requerimiento2.setIdProyecto(rs.getInt("ID_Proyecto"));
            requerimiento2.setProveedor(rs.getString("Proveedor"));
            listado_registros_rq2.add(requerimiento2);
        }
    }
    return listado_registros_rq2;
}
}

public class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {
        Connection connection = JDBCUtilities.getConnection();
        
        ArrayList<Requerimiento_3Vo> listado_registros_rq3 = new ArrayList<Requerimiento_3Vo>();
        String sql = "SELECT p.ID_Proyecto, mc.Nombre_Material FROM Proyecto p JOIN Compra c ON (p.ID_Proyecto=c.ID_Proyecto) JOIN MaterialConstruccion mc ON (c.ID_MaterialConstruccion=mc.ID_MaterialConstruccion) WHERE p.ID_Proyecto between 40 and 55 ORDER BY p.ID_Proyecto ASC;";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Requerimiento_3Vo requerimiento3 = new Requerimiento_3Vo();
                requerimiento3.setIdProyecto(rs.getInt("ID_Proyecto"));
                requerimiento3.setMaterial(rs.getString("Nombre_Material"));
                listado_registros_rq3.add(requerimiento3);
            }
        }
        return listado_registros_rq3;
    }
}